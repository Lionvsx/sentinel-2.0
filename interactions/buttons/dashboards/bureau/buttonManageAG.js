const BaseInteraction = require('../../../../utils/structures/BaseInteraction')
const { userResponse, reactionEmbedSelector, selectorReply, askForConfirmation, userResponseContent } = require('../../../../utils/functions/awaitFunctions')
const { MessageEmbed, Permissions } = require('discord.js')
const { createButton, createButtonActionRow } = require('../../../../utils/functions/messageComponents')
const Presence = require('../../../../src/schemas/PresenceSchema')

const DiscordLogger = require('../../../../utils/services/discordLoggerService')

const mongoose = require('mongoose');
const { updateGuildMemberCache } = require('../../../../utils/functions/utilitaryFunctions')

module.exports = class StartAgButtonInteraction extends BaseInteraction {
    constructor() {
        super('buttonManageAG', 'dashboards', 'button', {
            userPermissions: [],
            clientPermissions: []
        })
    }

    async run(client, interaction, buttonArgs) {
        interaction.deferUpdate()

        const loading = client.emojis.cache.get('741276138319380583')

        const agLogger = new DiscordLogger('AG', '#ff6b6b')
        agLogger.setLogMember(interaction.member)
        agLogger.setGuild(interaction.guild)
        
        const allMembers = await updateGuildMemberCache(interaction.guild)
        const allAssoMembers = await mongoose.model('User').find({ onServer: true, isMember: true })
        const dmChannel = await interaction.user.createDM().catch(err => console.log(err))
        const existingAG = await mongoose.model('Presence').findOne({ running: true, type: 'AG'})
        if (existingAG && existingAG._id) {
            const selectionEmbed = new MessageEmbed()
            .setDescription(`Bonjour \`${interaction.user.username}\`\nUne AG est actuellement en cours : \`${existingAG.name}\`\n\`${existingAG.name}\` est pr√©vue pour \`${existingAG.date}\`\nVoulez vous?`)
            .addFields(
                { name: `üôã‚Äç‚ôÇÔ∏è ${existingAG.open ? "Fermer l'appel" : "Ouvrir l'appel"}`, value: `L'appel est actuellement \`${existingAG.open ? "OUVERT" : "FERME"}\``, inline: true },
                { name: `üì® Forcer pr√©sence`, value: `Marque un ou plusieurs utilisateurs comme pr√©sent √† l'AG, qu'ils soient membres ou pas`, inline: true },
                { name: 'üóë Cloturez l\'AG', value: "Cloture l'AG et ferme l'appel. L'appel ne pourra pas etre r√©ouvert !", inline: true },
                { name: '‚ùå Annuler la commande', value: "Termine l'interaction avec le bot", inline: true },
            )
            .setColor('#9b59b6')
            const reactionSelector = await reactionEmbedSelector(dmChannel, ['üôã‚Äç‚ôÇÔ∏è', 'üì®', 'üóë', '‚ùå'], selectionEmbed).catch(err => console.log(err))
            if (!reactionSelector) return;
    
            if (reactionSelector.customId === 'üôã‚Äç‚ôÇÔ∏è') {
                selectorReply(reactionSelector, 'üôã‚Äç‚ôÇÔ∏è', `${existingAG.open ? "Fermer l'appel" : "Ouvrir l'appel"}`)
                if (existingAG.open === false ) {
                    existingAG.open = true;
                    await existingAG.save()
                    dmChannel.send(`**‚úÖ | **L'appel a √©t√© \`ouvert\` !`)
                    agLogger.info(`<@!${interaction.user.id}> a ouvert l'appel pour l'AG : \`${existingAG.name}\``)
                } else {
                    existingAG.open = false;
                    await existingAG.save()
                    dmChannel.send(`**‚úÖ | **L'appel a √©t√© \`ferm√©\` !`)
                    agLogger.info(`<@!${interaction.user.id}> a ferm√© l'appel pour l'AG : \`${existingAG.name}\``)
                }
                
            } else if (reactionSelector.customId === 'üóë') {
                selectorReply(reactionSelector, 'üóë', `Cl√¥turer l'AG`)
                existingAG.running = false
                existingAG.open = false
                await existingAG.save()


                dmChannel.send(`**‚úÖ | **L'AG a √©t√© clotur√©e !`)
                agLogger.info(`<@!${interaction.user.id}> a clotur√© l'appel pour l'AG : \`${existingAG.name}\``)

                const memberCheck = existingAG.memberCheck;
                const memberAudience = existingAG.audience;
            } else if(reactionSelector.customId === 'üì®') {
                selectorReply(reactionSelector, 'üì®', `Forcer pr√©sence`)
                const userAudienceString = await userResponseContent(dmChannel, `Quel(s) utilisateur(s) veux tu marquer comme pr√©sent(s)? \`(liste de pseudos, s√©par√©es d'une virgule)\``).catch(err => console.log(err))
                if (!userAudienceString) return
                const usersAndErrors = await getUsersAndErrorsFromString(interaction.guild, userAudienceString.split(/\s*[,]\s*/))
                const userAudience = usersAndErrors[0];
                const userErrors = usersAndErrors[1];
                if (userAudience.length === 0) return dmChannel.send(`**‚ùå | **Aucun utilisateur trouv√© !`)

                const tempMsg = await dmChannel.send(`**${loading} | **D√©but de la proc√©dure d'ajout des utilisateurs ...`)
                const summaryEmbed = new MessageEmbed()
                    .setTitle('COMPTE RENDU')
                    .setDescription(`Compte rendu final de l'op√©ration`)
                    .addField('‚úÖ UTILISATEURS AJOUTES', `\`\`\`${userAudience.length > 0 ? userAudience.map(member => member.user.tag).join('\n'): 'Aucun'}\`\`\``, false)
                    .addField(`‚ùå UTILISATEURS INTROUVABLES SUR LE SERVEUR`, `\`\`\`${userErrors.length > 0 ? userErrors.join(',\n') : 'Aucun'}\`\`\``, false)
                    .setColor('#fdcb6e')
        
                agLogger.setLogData(`SUCCESS:\n${userAudience.length > 0 ? userAudience.map(member => member.user.tag).join('\n'): 'Aucun'}\n\nNOT ON SERVER: \n${userErrors.length > 0 ? userErrors.join(',\n') : 'Aucun'}`)
                for (const member of userAudience) {
                    const User = await mongoose.model('User').findOne({ discordId: member.user.id })
                    mongoose.model('Presence').updateOne( { _id: existingAG._id }, { $push: {memberCheck: User}}, {}, async (err, result) => {
                        if (err) throw err;
                    })
                }
                await tempMsg.delete()
                dmChannel.send({
                    embeds: [summaryEmbed]
                })
                agLogger.info(`<@!${interaction.user.id}> a marqu√© des membres comme pr√©sents √† l'AG : \`${existingAG.name}\``)
            } else {
                selectorReply(reactionSelector, '‚ùå', `Commande annul√©e`)
            }
        } else {
            
            const selectionEmbed = new MessageEmbed()
                .setDescription(`Bonjour \`${interaction.user.username}\`\nComment se d√©roulera l'assembl√©e g√©n√©rale? `)
                .addFields(
                    { name: 'üåê En ligne', value: "Cr√©e une AG en ligne et envoie une invitation √† tous les membres", inline: true },
                    { name: 'üë• En pr√©sentiel', value: "Envoie une invitation pour une AG en pr√©sentiel √† tous les membres", inline: true },
                    { name: '‚ùå Annuler la commande', value: "Termine l'interaction avec le bot", inline: true },
                )
                .setColor('#9b59b6')
    
            const reactionSelector = await reactionEmbedSelector(dmChannel, ['üåê', 'üë•', '‚ùå'], selectionEmbed).catch(err => console.log(err))
            if (!reactionSelector) return;
    
            if (reactionSelector.customId === 'üåê') {
                selectorReply(reactionSelector, 'üåê', `En ligne`)
                return dmChannel.send('EN DEV (WIP)')
                const date = await userResponseContent(dmChannel, `A quelle date et heure se tiendra votre AG?`).catch(err => console.log(err))
                if (!date) return;
                const customName = await userResponseContent(dmChannel, `Quel est le nom de cette assembl√©e g√©n√©rale? \`(exemple: AG de d√©but d'ann√©e)\``).catch(err => console.log(err))
                if (!customName) return;

                const confirmation = await askForConfirmation(dmChannel, `Etes vous sur de vouloir cr√©er une AG en ligne?`)
                if (!confirmation) return;
            } else if (reactionSelector.customId === 'üë•') {
                selectorReply(reactionSelector, 'üë•', `En pr√©sentiel`)
                const date = await userResponseContent(dmChannel, `A quelle date et heure se tiendra votre AG?`).catch(err => console.log(err))
                if (!date) return;
                const customName = await userResponseContent(dmChannel, `Quel est le nom de cette assembl√©e g√©n√©rale? \`(exemple: AG de d√©but d'ann√©e)\``).catch(err => console.log(err))
                if (!customName) return;
                const localisation = await userResponseContent(dmChannel, `Dans quel lieux se tiendra cette assembl√©e g√©n√©rale?`).catch(err => console.log(err))
                if (!localisation) return;

                const confirmation = await askForConfirmation(dmChannel, `√ätes vous sur de vouloir une invitation d'AG √† \`\`\`\n${allAssoMembers.map(member => member.userTag).join('\n')}\`\`\``)
                if (!confirmation) return;

                const newAG = await Presence.create({
                    name: customName,
                    type: 'AG',
                    date: date,
                    running: true,
                    open: false,
                    audience: allAssoMembers
                })

                const tempMsg = await dmChannel.send(`**${loading} | **D√©but de l'envoi des invitations...`)
                const success = []
                const errors = []
                const userErrors = []
                for (const User of allAssoMembers) {
                    const guildMember = allMembers.get(User.discordId)
                    const userDmChannel = await guildMember.user.createDM()

                    if (!guildMember) {
                        userErrors.push(User.userTag)
                        continue;
                    }

                    const componentRow = createButtonActionRow([
                        createButton(`checkPresence|${newAG._id}`, 'Pr√©sent', 'SUCCESS')
                    ])
                    const embed = new MessageEmbed()
                        .setTitle(`**INVITATION :** \`${newAG.name}\``)
                        .setDescription(`Tu as √©t√© invit√© √† l'assembl√©e g√©n√©rale : \`${newAG.name}\` par \`${interaction.user.username}\`\nDate de l'assembl√©e g√©n√©rale: \`${date}\`\nLieu de l'assembl√©e g√©n√©rale : \`${localisation}\`\n\nüîΩ Tu pourras t'enregistrer pr√©sent une fois l'appel ouvert üîΩ`)
                        .setColor('#d35400')
                    try {
                        await userDmChannel.send({
                            embeds: [embed],
                            components: [componentRow]
                        })
                        success.push(guildMember.user.tag)
                        await tempMsg.edit(`**${loading} | **Envoi des invitations en cours : \`${success.length + errors.length}/${allAssoMembers.length}\``)
                    } catch (err) {
                        errors.push(guildMember.user.tag)
                    }
                }


                await tempMsg.edit(`**‚úÖ | **Invitations envoy√©es avec succ√®s √† \`${success.length}/${allAssoMembers.length}\` membres`)
                const informationEmbed = new MessageEmbed()
                    .setTitle(`‚Ñπ Informations ‚Ñπ`)
                    .setDescription(`Vous avez cr√©e une assembl√©e g√©n√©rale avec les param√®tres suivants : \nNom : \`${newAG.name}\`\nDate : \`${date}\`\nLieu : \`${localisation}\`\n\nCette commande ne d√©marre pas l'assembl√©e g√©n√©rale, il en cr√©e juste une avec les param√®tres renseign√©es et invite les joueurs en DM, afin de d√©marrer l'assembl√©e g√©n√©rale et donc d'ouvrir l'appel, merci de re-cliquer sur le bouton \`G√©rer les Assembl√©es G√©n√©rales\`\n\nüîΩ COMPTE RENDU DES INVITATIONS üîΩ\n`)
                    .addField('‚úÖ UTILISATEURS INVITES', `\`\`\`${success.length > 0 ? success.join('\n'): 'Aucun'}\`\`\``, false)
                    .addField(`‚úâ UTILISATEURS INJOIGNABLES EN DM`, `\`\`\`${errors.length > 0 ? errors.join(',\n') : 'Aucun'}\`\`\``, false)
                    .addField(`‚ùå UTILISATEURS INTROUVABLES SUR LE SERVEUR`, `\`\`\`${userErrors.length > 0 ? userErrors.join(',\n') : 'Aucun'}\`\`\``, false)
                    .setColor('#3498db')
                agLogger.setLogData(`NOM : \`${newAG.name}\`\nDATE : \`${date}\`\nLIEU : \`${localisation}\``)
                agLogger.info(`<@!${interaction.user.id}> a cr√©e une AG avec les param√®tres suivants :`)
                await dmChannel.send({
                    embeds: [informationEmbed]
                })
            } else {
                selectorReply(reactionSelector, '‚ùå', `Commande annul√©e`)
            }
        }
    }
}


function getUsersAndErrorsFromString(guild, searchArgs) { // REDONDANCE AVEC REGISTER MEMBER
    return new Promise(async (resolve) => {
        await updateGuildMemberCache(guild)
        const userArray = []
        const userFailArray = []
        for (const arg of searchArgs) {
            const userMatch = guild.members.cache.find(m => m.user.tag.toLowerCase().includes(arg.toLowerCase()))
            if (userMatch) userArray.push(userMatch)
            else userFailArray.push(arg)
        }

        resolve([userArray, userFailArray])
    })
}